---
name: tests

on:
  pull_request_target:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs: {}

jobs:
  build:
    name: Tests with Ruby v${{ matrix.ruby }} and Node v${{ matrix.node }}
    runs-on: "ubuntu-latest"
    if: |
      github.actor == 'dependabot[bot]' && github.event_name == 'pull_request_target' ||
      github.actor != 'dependabot[bot]'
    strategy:
      fail-fast: false
      matrix:
        ruby: ["3.1"]
        node: ["16"]

    services:
      postgres:
        image: postgres:11.5
        ports: ["5432:5432"]
        options:
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5

    steps:
      - name: Install image utils
        run: sudo apt install -yqq imagemagick exiftool

      - name: Install PostgreSQL client
        env:
          PGHOST: localhost
          PGUSER: postgres
        run: |
          sudo apt install -yqq libpq-dev
          psql -U postgres -c "create database test"

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: >
            ${{ runner.os }}-${{ matrix.ruby }}-gems-${{
            hashFiles('Gemfile.lock') }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: "**/node_modules"
          key: >
            ${{ runner.os }}-${{ matrix.node }}-yarn-${{
            hashFiles('**/yarn.lock') }}

      - name: Set up Node
        uses: actions/setup-node@v2.5.1
        with:
          node-version: ${{ matrix.node }}

      - name: Node version
        run: node -v

      - name: Ruby version
        run: ruby -v

      - name: Install npm dependencies
        run: |
          yarn install

      - name: Install gem dependencies
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle update --jobs 4 --retry 3

      - name: Run tests
        env:
          RAILS_ENV: test
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          POSITION_STACK_API_KEY: "sample-position-stack-api-key"
          DATABASE_URL: postgres:///test
          PGHOST: localhost
          PGUSER: postgres
        run: |
          bundle exec rails test:all
          yarn test:ci

      - name: Run lint
        env:
          RAILS_ENV: test
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          POSITION_STACK_API_KEY: "sample-position-stack-api-key"
          DATABASE_URL: postgres:///test
          PGHOST: localhost
          PGUSER: postgres
        run: |
          bundle exec rubocop
          # bundle exec brakeman
          yarn lint
